buildscript {
    ext {
        springBootVersion = '1.5.10.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'

description = """"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    wsimport
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'build/generated-sources/wsimport']
    }
}

jar {
    baseName = 'xroad-catalog-collector'
    from project.file('LICENSE.txt')
    manifest {
        attributes 'Implementation-Version' : version
    }
}

task wsImport {
    ext.sourcedestdir = "${buildDir}/generated-sources/wsimport"
    ext.destdir = "${buildDir}/generated-classes/wsimport"
    ext.wsdl = "${projectDir}/src/main/resources/schema/metaservices.wsdl"

    inputs.files wsdl
    outputs.dir sourcedestdir

    doLast() {
        project.ant {
            taskdef name: "wsimport", classname: "com.sun.tools.ws.ant.WsImport",
                    classpath: configurations.wsimport.asPath
            mkdir(dir: destdir)
            mkdir(dir: sourcedestdir)

            wsimport(sourcedestdir: sourcedestdir,
                    destdir: destdir,
                    wsdl: wsdl,
                    wsdllocation: "/schema/metaservices.wsdl",
                    package: "fi.vrk.xroad.catalog.collector.wsimport",
                    keep: "true"
            ) {
                produces(dir: sourcedestdir, includes: "**/*.java")
            }
        }
    }
}

dependencies {
    compile project(':xroad-catalog-persistence')

    // https://mvnrepository.com/artifact/org.apache.httpcomponents/httpclient
    compile group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5'

    compile 'org.json:json:20171018'
    compile 'org.springframework.boot:spring-boot-starter-web-services'
    compile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    compile 'com.typesafe.akka:akka-actor_2.11:2.4.20'
    compile 'com.typesafe.akka:akka-slf4j_2.11:2.4.20'
    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.apache.cxf:cxf-rt-frontend-jaxws:3.2.1'
    compile 'org.apache.cxf:cxf-rt-transports-http:3.2.1'
    compile 'org.apache.cxf:cxf-core:3.2.1'
    compileOnly 'org.projectlombok:lombok:1.16.18'

    wsimport "com.sun.xml.ws:jaxws-tools:2.2.10"

    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile 'org.mockito:mockito-all:2.0.2-beta'
    testCompile 'com.typesafe.akka:akka-testkit_2.11:2.4.20'
    testCompile 'org.powermock:powermock-core:1.6.4'
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    testCompile 'org.powermock:powermock-api-mockito:1.6.4'
    testCompileOnly 'org.projectlombok:lombok:1.16.18'

}

compileJava.dependsOn wsImport

test {
    systemProperty 'spring.config.name', 'collector,catalogdb'
}

bootRun {
    systemProperty 'spring.config.name', 'collector,catalogdb'
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}
