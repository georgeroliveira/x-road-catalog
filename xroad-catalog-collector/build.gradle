buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "org.springframework.boot" version "${springBootVersion}"
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
}

description = """"""

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
    mavenLocal()
}

configurations {
    wsimport
}

sourceSets {
    main {
        java.srcDirs = ['src/main/java', 'build/generated-sources/wsimport']
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
    archiveClassifier = ''
}

springBoot {
    mainClass = 'fi.vrk.xroad.catalog.collector.XRoadCatalogCollector'
}


task wsImport {
    ext.sourcedestdir = "${buildDir}/generated-sources/wsimport"
    ext.destdir = "${buildDir}/generated-classes/wsimport"
    ext.wsdl = "${projectDir}/src/main/resources/schema/metaservices.wsdl"

    inputs.files wsdl
    outputs.dir sourcedestdir

    doLast() {
        project.ant {
            taskdef name: "wsimport", classname: "com.sun.tools.ws.ant.WsImport",
                    classpath: configurations.wsimport.asPath
            mkdir(dir: destdir)
            mkdir(dir: sourcedestdir)

            wsimport(sourcedestdir: sourcedestdir,
                    destdir: destdir,
                    wsdl: wsdl,
                    wsdllocation: "/schema/metaservices.wsdl",
                    package: "fi.vrk.xroad.catalog.collector.wsimport",
                    keep: "true"
            ) {
                produces(dir: sourcedestdir, includes: "**/*.java")
            }
        }
    }
}

dependencies {
    implementation project(':xroad-catalog-persistence')

    implementation ("javax.annotation:javax.annotation-api:${javaxAnnotationVersion}")
    implementation ("javax.xml.bind:jaxb-api:${javaxJaxbVersion}")
    implementation("com.google.guava:guava:${guavaVersion}")
    implementation("org.apache.httpcomponents:httpclient:${httpClientVersion}")
    implementation("org.json:json:${jsonVersion}")
    implementation("org.springframework.boot:spring-boot-starter-web-services:${springBootVersion}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("com.typesafe.akka:akka-actor_3:${akkaVersion}")
    implementation("com.typesafe.akka:akka-slf4j_3:${akkaVersion}")
    implementation("org.apache.cxf:cxf-rt-frontend-jaxws:${cxfCoreVersion}")
    implementation("org.apache.cxf:cxf-rt-transports-http:${cxfVersion}")
    implementation("org.apache.cxf:cxf-core:${cxfCoreVersion}")
    implementation("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    wsimport("com.sun.xml.ws:jaxws-maven-plugin:${jaxbVersion}")
    implementation("jakarta.xml.ws:jakarta.xml.ws-api:${jaxbVersion}")
    implementation("com.sun.xml.ws:jaxws-rt:${jaxbVersion}")
    implementation("com.sun.xml.ws:jaxws-tools:${jaxbVersion}")
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
                exclude group: 'org.mockito', module :'mockito-core'
    }
    testImplementation("org.mockito:mockito-inline:${mockitoInlineVersion}")
    testImplementation("com.typesafe.akka:akka-testkit_3:${akkaVersion}")
    testImplementation("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testImplementation("javax.annotation:javax.annotation-api:${javaxAnnotationVersion}")
    testImplementation("javax.xml.bind:jaxb-api:${javaxJaxbVersion}")
}

compileJava.dependsOn wsImport

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
    systemProperty 'spring.config.name', 'collector,catalogdb'
    finalizedBy jacocoTestReport
}

bootRun {
    systemProperty 'spring.config.name', 'collector,catalogdb'
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/wsimport/*"
            ])
        }))
    }
    reports {
        xml.required = true
    }
}
