buildscript {
    ext {
        springBootVersion = '1.5.10.RELEASE'
    }
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'jacoco'

repositories {
    mavenCentral()
    mavenLocal()
}

// tag::xsd[]
task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/services.wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, source: 1.8, target: 1.8, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}
// end::xsd[]

task afterEclipseImport {
	dependsOn "genJaxb"
}

// tag::jaxb[]
configurations {
    jaxb
}

jar {
    baseName = 'xroad-catalog-lister'
    from genJaxb.classesDir
    manifest {
        attributes 'Implementation-Version' : version
    }
}

// tag::dependencies[]
sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile project(':xroad-catalog-persistence')

    compile group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.0'
    compile "org.springdoc:springdoc-openapi-ui:1.3.2"
    compile ("org.apache.commons:commons-csv:1.5")
    compile("org.springframework.boot:spring-boot-starter-web-services")
    compile("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
    compile("wsdl4j:wsdl4j:1.6.3")
    compile(files(genJaxb.classesDir).builtBy(genJaxb))
    compile('commons-beanutils:commons-beanutils:1.9.3')

    jaxb("org.glassfish.jaxb:jaxb-xjc:2.2.11")
    jaxb("org.glassfish.jaxb:jaxb-runtime:2.2.11")

    compileOnly("org.projectlombok:lombok:1.16.18")

    testCompile("org.springframework.boot:spring-boot-starter-test")
}

test {
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    systemProperty 'spring.config.name', 'lister,catalogdb'
}

bootRun {
    systemProperty 'spring.config.name', 'lister,catalogdb'
}
