plugins {
    id "org.springframework.boot" version "${springBootVersion}"
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
}

group 'fi.vrk.xroad.catalog.lister'
sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenCentral()
}

task genJaxb {
    ext.sourcesDir = "${buildDir}/generated-sources/jaxb"
    ext.classesDir = "${buildDir}/classes/jaxb"
    ext.schema = "src/main/resources/services.wsdl"

    outputs.dir classesDir

    doLast() {
        project.ant {
            taskdef name: "xjc", classname: "com.sun.tools.xjc.XJCTask",
                    classpath: configurations.jaxb.asPath
            mkdir(dir: sourcesDir)
            mkdir(dir: classesDir)

            xjc(destdir: sourcesDir, schema: schema) {
                arg(value: "-wsdl")
                produces(dir: sourcesDir, includes: "**/*.java")
            }

            javac(destdir: classesDir, includeantruntime:false, source: 11, target: 11, debug: true,
                    debugLevel: "lines,vars,source",
                    classpath: configurations.jaxb.asPath) {
                src(path: sourcesDir)
                include(name: "**/*.java")
                include(name: "*.java")
            }

            copy(todir: classesDir) {
                fileset(dir: sourcesDir, erroronmissingdir: false) {
                    exclude(name: "**/*.java")
                }
            }
        }
    }
}

task afterEclipseImport {
	dependsOn "genJaxb"
}

configurations {
    jaxb
}

bootJar {
    enabled = true
    layered {
        enabled = false
    }
}

jar {
    enabled = false
}

dependencies {
    implementation project(':xroad-catalog-persistence')

    implementation("javax.ws.rs:javax.ws.rs-api:${jakartaVersion}")
    implementation("org.springdoc:springdoc-openapi-ui:${springDocVersion}")
    implementation ("org.apache.commons:commons-csv:${commonsCsvVersion}")
    implementation("org.springframework.boot:spring-boot-starter-web-services:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    implementation("wsdl4j:wsdl4j:${wsdl4jVersion}")
    implementation(files(genJaxb.classesDir).builtBy(genJaxb))
    implementation("commons-beanutils:commons-beanutils:${commonsBeanUtilsVersion}")
    implementation("com.google.guava:guava:${guavaVersion}")
    jaxb("com.sun.xml.bind:jaxb-xjc:${XjcVersion}")
    implementation("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testImplementation("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
}

test {
    useJUnitPlatform {
        includeEngines 'junit-jupiter'
    }
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
    systemProperty 'spring.config.name', 'lister,catalogdb'
    finalizedBy jacocoTestReport
}

bootRun {
    systemProperty 'spring.config.name', 'lister,catalogdb'
}

springBoot {
    mainClass = 'fi.vrk.xroad.catalog.lister.ListerApplication'
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
    }
}
